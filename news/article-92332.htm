<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://thebestvpn.github.io/news/article-92332.htm" />
    <meta charset="utf-8">
    <title>Android开发基础——Kotlin：标准函数和静态方法</title>
        <meta name="description" content="标准函数with/run/apply Kotlin中的标准函数指的是Standard.kt文件中定义的函数，任何Kotlin代码都可以自由调用所有的标准函数。 之前提到let函数，该函数主要作用是配合" />
        <link rel="icon" href="/assets/website/img/clashagent/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="免费最佳VPN翻墙 机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://thebestvpn.github.io/news/article-92332.htm" />
    <meta property="og:site_name" content="免费最佳VPN翻墙 机场订阅官网" />
    <meta property="og:title" content="Android开发基础——Kotlin：标准函数和静态方法" />
    <meta property="og:image" content="https://thebestvpn.github.io/uploads/20250106/4fec9bebc5e494f815ce2a34235b0120.webp" />
        <meta property="og:release_date" content="2025-04-10T08:14:44" />
    <meta property="og:updated_time" content="2025-04-10T08:14:44" />
        <meta property="og:description" content="标准函数with/run/apply Kotlin中的标准函数指的是Standard.kt文件中定义的函数，任何Kotlin代码都可以自由调用所有的标准函数。 之前提到let函数，该函数主要作用是配合" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Android开发基础——Kotlin：标准函数和静态方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.googleapis.com/">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">
    <link href="/assets/website/css/clashagent/css2.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/all.min.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/animate.min.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/tempusdominus-bootstrap-4.min.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/clashagent/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XX6ZTTYY8T"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XX6ZTTYY8T');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="container-xxl bg-white p-0">
        <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="container-xxl position-relative p-0">
                        <nav class="navbar navbar-expand-lg navbar-dark bg-dark px-4 px-lg-5 py-3 py-lg-0">
                <a href="/" class="navbar-brand p-0 xcblog-blog-logo">
                                        <span class="text-primary m-0">免费最佳VPN翻墙</span>
                                    </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav ms-auto py-0 pe-4">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                                <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                            </div>
                </div>
            </nav>
            <div class="container-xxl py-5 bg-dark hero-header mb-5">
                <div class="container text-center my-5 pt-5 pb-4">
                    <h1 class="display-3 text-white mb-3 animated slideInDown">Android开发基础——Kotlin：标准函数和静态方法</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center text-uppercase">
                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                            <li class="breadcrumb-item text-white active" aria-current="page">正文</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
        <div class="container-xxl py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <h2 id="articleContentId">标准函数with/run/apply</h2> <p>Kotlin中的标准函数指的是Standard.kt文件中定义的函数，任何Kotlin代码都可以自由调用所有的标准函数。</p> <p>之前提到let函数，该函数主要作用是配合?.操作符进行辅助判空处理的。</p> <p>这里再看几个标准函数with/run/apply。</p> <h3>with</h3> <p>with函数接收两个参数，第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda表达式。with函数会在Lambda表达式中提供第一个参数对象的上席文，并使用Lambda表达式中的最后一行代码作为返回值返回。</p> <p>其形式类似于：</p> <pre><code class="language-Kotlin">    val result = with(obj) {         // obj context         "value"     }</code></pre> <p>该函数可以在连续调用同一个对象的多个方法时让代码变得更加简洁。</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val builder = StringBuilder()     builder.append("Start eating fruits.\n")     for (fruit in list) {         builder.append(fruit).append("\n")     }     builder.append("Ate al fruits.")     val result = builder.toString()     println(result)</code></pre> <p>上面的代码逻辑很简单，只是将各个字符串进行打印，其结果为：</p> <pre><code class="language-Kotlin">Start eating fruits. apple orange banana Ate al fruits. </code></pre> <p>但是上面代码多次调用了builder对象的方法，而如果使用with函数，则有：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = with(StringBuilder()) {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")         toString()     }     println(result)</code></pre> <p>上面的代码首先给with函数的第一个参数传入了一个StringBuilder对象，之后的Lambda表示式的上下文就是该StringBuilder对象，因此便可以直接使用append之类的方法调用，然后最后一行代码的执行结果会返回。</p> <h3>run</h3> <p>run函数通常不会直接调用，而是要在某个对象的基础上调用，并且run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。其它方面和with函数类似，也会将Lambda表示式的最后一行代码作为返回值返回。</p> <pre><code class="language-Kotlin">    val result = obj.run {         // obj context         "value"     }</code></pre> <p>而如果使用run函数对上述代码改写，则为：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = StringBuilder().run {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")         toString()     }     println(result)</code></pre> <p>代码上的变动很小，不过能够实现一样的功能。</p> <h3>apply</h3> <p>apply函数和run函数也类似，都要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会自动返回调用对象本身。</p> <pre><code class="language-Kotlin">    val result = obj.apply {         // obj context     }</code></pre> <p>使用apply实现上面的代码，则为：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = StringBuilder().run {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")     }     println(result.toString())</code></pre> <p>代码变动仍然很小，不过由于apply没有返回值，只能通过调用StringBuilder的toString方法进行打印。</p> <h2>定义静态方法</h2> <p>静态方法指不需要创建实例就能够调用的方法。</p> <p>静态方法很适合编写一些工具类的功能，因为功能类通常没有创建实例的必要，是全局通用的。</p> <p>虽然其它编程语言中，定义一个静态方法很简单，但是Kotlin却弱化了这方面的使用。</p> <p>如果需要使用类似的功能，单例类就可以实现。不过单例类会将整个类中方法的调用方式都变为类似于静态方法的调用方式。而如果只希望类中的某一个方法变为静态方法的调用方式，就需要使用到之前提到的companion object了。</p> <pre><code class="language-Kotlin">class Util {     fun doAction1() {         println("doAction1")     }      companion object {         fun doAction2() {             println("doAction2")         }     } }  fun main() {     Util().doAction1()     Util.doAction2() }</code></pre> <p>上面的doAction1是普通方法，需要创建Util类的实例才可调用，而doAction2方法则可以通过静态方法的调用方式进行调用。</p> <p>但其实doAction2方法并不是静态方法，companion object实际上会在Util类的内部创建一个伴生类，而doAction2方法就是定义在该伴生类中的实例方法。只是Kotlin会保证Util类始终只会存在一个伴生类对象，因此调用Util.doAction2方法实际上就是调用了Util类中伴生类对象的doAction2方法。</p> <p>上面只是静态方法类似的调用形式和使用方法，如果需要定义真正的静态方法，Kotlin提供了两种实现方式：</p> <ul> <li>注解</li> <li>顶层方法</li> </ul> <h3>注解</h3> <p>将单例类或companion object中的方法加上@JvmStatic注解，Kotlin就会将对应方法编译为真正的静态方法。</p> <pre><code class="language-java">class Util {     fun doAction1() {         println("doAction1")     }      companion object {         @JvmStatic         fun doAction2() {             println("doAction2")         }     } }</code></pre> <p>但是@JvmStatic注解只能加在单例类或companion object中的方法上，不能加在普通方法上。</p> <h3>顶层方法</h3> <p>顶层方法指没有定义在任何类中的方法。</p> <p>Kotlin编译器会将所有的顶层方法全部编译为静态方法，比如main方法。</p> <p>而所有顶层方法可以在任何位置被直接调用，而不用考虑包路径，也不用创建实例，直接调用即可。比如main方法，可以在任意位置直接调用。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-91572.htm">猫三联每一针间隔时间（猫三联每一针间隔时间多久）</a></p>
                                        <p>下一个：<a href="/news/article-92334.htm">go实践十九 web开发使用模板获取form参数</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-90104.htm" title="宠物医院寄养协议书范本（宠物医院寄养费多少钱）">宠物医院寄养协议书范本（宠物医院寄养费多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-91225.htm" title="动物疫苗的储存不合格区什么颜色的线（动物疫苗运输与储存规范）">动物疫苗的储存不合格区什么颜色的线（动物疫苗运输与储存规范）</a></li>
                        <li class="py-2"><a href="/news/article-91572.htm" title="猫三联每一针间隔时间（猫三联每一针间隔时间多久）">猫三联每一针间隔时间（猫三联每一针间隔时间多久）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-7-free-high-speed-nodes.htm" title="免费最佳VPN翻墙 | 4月7日20.3M/S|免费Shadowrocket/Clash/V2ray/SSR订阅机场">免费最佳VPN翻墙 | 4月7日20.3M/S|免费Shadowrocket/Clash/V2ray/SSR订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-90078.htm" title="上海动物防疫站打疫苗时间（上海动物疫苗控制中心）">上海动物防疫站打疫苗时间（上海动物疫苗控制中心）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-8-free-node-subscribe.htm" title="免费最佳VPN翻墙 | 4月8日18.3M/S|免费SSR/Clash/Shadowrocket/V2ray订阅机场">免费最佳VPN翻墙 | 4月8日18.3M/S|免费SSR/Clash/Shadowrocket/V2ray订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-91224.htm" title="哈尔滨王允海宠物医院怎么样呀电话号码（阿城王允海宠物医院）">哈尔滨王允海宠物医院怎么样呀电话号码（阿城王允海宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-92332.htm" title="Android开发基础——Kotlin：标准函数和静态方法">Android开发基础——Kotlin：标准函数和静态方法</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-6-free-subscribe-node.htm" title="免费最佳VPN翻墙 | 4月6日21.6M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点">免费最佳VPN翻墙 | 4月6日21.6M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点</a></li>
                        <li class="py-2"><a href="/news/article-92334.htm" title="go实践十九 web开发使用模板获取form参数">go实践十九 web开发使用模板获取form参数</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
            <div class="container-fluid bg-dark text-light footer pt-5 mt-5 wow fadeIn" data-wow-delay="0.1s">
        <div class="container">
            <div class="copyright">
                <div class="row">
                    <div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
                                            <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <p class="text-white-50 f-15 mb-0">
                            <a href="/">免费最佳VPN翻墙 机场订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-md-6 text-center text-md-end">
                        <div class="footer-menu">
                            <a href="/">Home</a>
                            <a href="#">Cookies</a>
                            <a href="#">Help</a>
                            <a href="#">FQAs</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"><i class="bi bi-arrow-up"></i></a>
    <script src="/assets/website/js/frontend/clashagent/jquery-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashagent/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/clashagent/main.js"></script>
    <script src="/assets/website/js/frontend/clashagent/rocket-loader.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
    </div>
</body>

</html>